from lingoro_bot.config import WORDPAIR_ITEM_SEPARATOR, WORDPAIR_SEPARATOR, WORDPAIR_TRANSCRIPTION_SEPARATOR
from lingoro_bot.custom_types.wordpair_types import (
    BaseWordpairTranslationType,
    BaseWordpairWordType,
    WordpairComponentsType,
)


def format_valid_wordpairs(wordpairs: list[str] | None) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–æ–≤—ñ –ø–∞—Ä–∏"""
    if wordpairs is None:
        return '-'

    formatted_valid_wordpairs: str = '\n'.join((f'{num}. {wordpair}' for num, wordpair in
                                                enumerate(wordpairs, start=1)))
    return formatted_valid_wordpairs


def format_invalid_wordpairs(wordpairs: list[dict[str, str]] | None) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –Ω–µ –≤–∞–ª—ñ–¥–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–æ–≤—ñ –ø–∞—Ä–∏"""
    if wordpairs is None:
        return '-'

    formatted_invalid_wordpairs: str = '\n\n'.join((f'{num}. {wordpair["wordpair"]}\n{wordpair["errors"]}'
                                                    for num, wordpair in enumerate(wordpairs, start=1)))
    return formatted_invalid_wordpairs


def format_wordpair_info(idx: int,
                         words: list[str],
                         translations: list[str],
                         annotation: str,
                         number_errors: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –Ω–µ –≤–∞–ª—ñ–¥–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–æ–≤—ñ –ø–∞—Ä–∏"""
    formatted_wordpair_info: str = (f'{idx}. {words} ‚ñ™Ô∏è {translations} ‚ñ™Ô∏è {annotation}\n'
                                    f'üî∫ –ü–æ–º–∏–ª–∫–∏: {number_errors}\n')

    return formatted_wordpair_info


def parse_wordpair_components(wordpair: str) -> WordpairComponentsType:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑–¥—ñ–ª–µ–Ω—É —Å–ª–æ–≤–Ω–∏–∫–æ–≤—É –ø–∞—Ä—É –Ω–∞ –æ–∫—Ä–µ–º—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:
    —Å–ª–æ–≤–∞ –∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è–º–∏, –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è–º–∏ —Ç–∞ –∞–Ω–æ—Ç–∞—Ü—ñ—é.

    Notes:
        –ü—Ä–∏–π–º–∞—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∞ –ø–∞—Ä–∞.

    Args:
        wordpair (str): –°–ª–æ–≤–Ω–∏–∫–æ–≤–∞ –ø–∞—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
            "w1 | tr1 , w2 | tr2 : t1, t2 : a"
            - w ‚Äî —Å–ª–æ–≤–æ (–æ–±–æ–≤ º—è–∑–∫–æ–≤–æ)
            - t ‚Äî –ø–µ—Ä–µ–∫–ª–∞–¥ (–æ–±–æ–≤ º—è–∑–∫–æ–≤–æ)
            - tr ‚Äî —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            - a ‚Äî –∞–Ω–æ—Ç–∞—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        *–°–ª—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –∞–±–æ –ª–∏—à–µ –ø–æ –æ–¥–Ω–æ–º—É.

    Returns:
        WordpairComponentsType: –°–ª–æ–≤–Ω–∏–∫ —ñ–∑ –∫–ª—é—á–∞–º–∏:
            - "words": list[BaseWordpairWordType] ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —ñ–∑ —Å–ª–æ–≤–∞–º–∏ —Ç–∞
            —ó—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (—è–∫—â–æ –Ω–µ–º–∞—î, —Ç–æ None),
            - "translations": list[BaseWordpairTranslationType] ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —ñ–∑ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏ —Ç–∞
            —ó—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (—è–∫—â–æ –Ω–µ–º–∞—î, —Ç–æ None),
            - "annotation": str | None ‚Äî –∞–Ω–æ—Ç–∞—Ü—ñ—è (—è–∫—â–æ –Ω–µ–º–∞—î, —Ç–æ None).

    Example:
        >>> parse_wordpair_components('hello | —Ö–µ–ª–æ—É, hi | —Ö–∞–π : –ø—Ä–∏–≤—ñ—Ç, –≤—ñ—Ç–∞—é : –∑–∞–≥–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—ñ—Ç–∞–Ω–Ω—è')
        {
            'words': [
                {'word': 'hello', 'transcription': '—Ö–µ–ª–æ—É'},
                {'word': 'hi', 'transcription': '—Ö–∞–π'}
                ],
            'translations': [
                {'translation': '–ø—Ä–∏–≤—ñ—Ç', 'transcription': None},
                {'translation': '–≤—ñ—Ç–∞—é', 'transcription': None}
                ],
            'annotation': '–∑–∞–≥–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—ñ—Ç–∞–Ω–Ω—è'
        }
    """
    wordpair_components: WordpairComponentsType = {'words': [], 'translations': [], 'annotation': None}
    wordpair_words: list[BaseWordpairWordType] = []
    wordpair_translations: list[BaseWordpairTranslationType] = []

    # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ—ó –ø–∞—Ä–∏ –ø–æ —á–∞—Å—Ç–∏–Ω–∞–º
    wordpair_parts: list[str] = wordpair.split(WORDPAIR_SEPARATOR)
    part_of_words: str = wordpair_parts[0]
    part_of_translation: str = wordpair_parts[1]

    # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ—ó –ø–∞—Ä–∏ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏
    item_of_words: list[str] = part_of_words.split(WORDPAIR_ITEM_SEPARATOR)
    item_of_translations: list[str] = part_of_translation.split(WORDPAIR_ITEM_SEPARATOR)

    # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ—ó –ø–∞—Ä–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    wordpair_annotation: str | None = wordpair_parts[2].strip() if len(wordpair_parts) == 3 else None

    for word_item in item_of_words:
        word, word_transcription = _parse_item_transcription(word_item)
        wordpair_words.append({'word': word,
                               'transcription': word_transcription})

    for translation_item in item_of_translations:
        translation, translation_transcription = _parse_item_transcription(translation_item)
        wordpair_translations.append({'translation': translation,
                                      'transcription': translation_transcription})

    wordpair_components['words'] = wordpair_words
    wordpair_components['translations'] = wordpair_translations
    wordpair_components['annotation'] = wordpair_annotation

    return wordpair_components


def _parse_item_transcription(item: str) -> tuple[str, str | None]:
    """–†–æ–∑–¥—ñ–ª—è—î –µ–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ—ó –ø–∞—Ä–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: —Å–ª–æ–≤–æ —Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é.

    Args:
        item (str): –ß–∞—Å—Ç–∏–Ω–∞ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ—ó –ø–∞—Ä–∏ (—Å–ª–æ–≤–æ –∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—î—é —á–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—î—é).

    Returns:
        tuple[str, str | None]: –ö–æ—Ä—Ç–µ–∂ —ñ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–∞ –π–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (—è–∫—â–æ –Ω–µ–º–∞—î, —Ç–æ None).
    """
    parsed_item: str = item.split(WORDPAIR_TRANSCRIPTION_SEPARATOR)  # –†–æ–∑–¥—ñ–ª–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç

    component: str = parsed_item[0].strip()
    transcription: str | None = parsed_item[1].strip() if len(parsed_item) == 2 else None

    return component, transcription


def format_word_items(word_items: list[dict], is_translation_items: bool = False) -> str:
    """–†–æ–∑–¥—ñ–ª—è—î –≤—Å—ñ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ñ —Å–ª–æ–≤–∞ –Ω–∞ —Å–ª–æ–≤–∞ —Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (—è–∫—â–æ —î), –ø—ñ—Å–ª—è —Ñ–æ—Ä–º–∞—Ç—É—î —ó—Ö —É —Ä—è–¥–æ–∫.

    Args:
        word_items (list[dict]):
            –ü—Ä–∏–∫–ª–∞–¥ (word_items):
                [
                    {'word': '–∫—ñ—Ç', 'transcription': None},
                    {'word': '—Å–æ–±–∞–∫–∞', 'transcription': None},
                ]
                –∞–±–æ
                [
                    {'translation': 'cat', 'transcription': '–∫–µ—Ç'},
                    {'translation': 'dog', 'transcription': None},
                ]
        is_translation_items (bool): –ü—Ä–∞–ø–æ—Ä, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ —Å–ª–æ–≤–∞ —î –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏ (translation).

    Returns:
        str: –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω —Å–ª—ñ–≤.

    Examples:
        >>> format_word_items(word_items=[{'translation': 'cat', 'transcription': '–∫–µ—Ç'},
                                          {'translation': 'dog', 'transcription': None],
                              is_translation_items=True)
        "cat [–∫–µ—Ç], dog"
    """
    formatted_words: list[str] = []

    for word_item in word_items:
        word: str = word_item.get('translation') if is_translation_items else word_item.get('word')

        transcription: str | None = word_item.get('transcription')

        formatted_word: str = (f'{word} [{transcription}]'
                               if transcription is not None else word)
        formatted_words.append(formatted_word)

    joined_words: str = ', '.join(formatted_words)
    return joined_words


def get_formatted_wordpairs_list(wordpair_items: list[dict]) -> list[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä.

    Args:
        wordpair_items (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –Ω–∏—Ö.

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –∑ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–º–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–∏.
    """
    formatted_wordpairs: list[str] = []

    for idx, wordpair_item in enumerate(wordpair_items, start=1):
        word_items: list[dict] = wordpair_item.get('words')
        translation_items: list[dict] = wordpair_item.get('translations')
        annotation: str = wordpair_item.get('annotation') or '–ù–µ–º–∞—î –∞–Ω–æ—Ç–∞—Ü—ñ—ó'
        wordpair_number_errors: int = wordpair_item.get('number_errors')

        formatted_word_items: list[str] = format_word_items(word_items)
        formatted_translation_items: list[str] = format_word_items(translation_items, is_translation_items=True)

        formatted_wordpair: str = format_wordpair_info(idx=idx,
                                                       words=formatted_word_items,
                                                       translations=formatted_translation_items,
                                                       annotation=annotation,
                                                       number_errors=wordpair_number_errors)
        formatted_wordpairs.append(formatted_wordpair)
    return formatted_wordpairs
