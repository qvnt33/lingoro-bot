from utils.types import Tender



class TenderView:
    @staticmethod
    def display_add_tender(tender: Tender) -> str:
        """
        –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–Ω–¥–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        :param tender: –û–±—ä–µ–∫—Ç —Ç–µ–Ω–¥–µ—Ä–∞.

        :return: –ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–Ω–¥–µ—Ä–∞
        """

        template = (
            f"<b>üìù–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞:</b>\n"
            f"\t<b>‚îú –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä</b> <code>{tender.id}</code>\n"
            f"\t<b>‚îú –ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{tender.customer_name}</code>\n"
            f"\t<b>‚îú –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> <code>{tender.name}</code>\n"
            f"\t<b>‚îî –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{tender.deadline_date} {tender.deadline_time}</code>\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∂–∞–ª–æ–±
        if tender.complaints:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∂–∞–ª–æ–±–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            template += TenderView.generate_complaint_text(tender.complaints)
        
        return template
        
        return template
    
    @staticmethod
    def display_tender(tender: Tender):
        template = (
            f"<b>üìù–¢–µ–Ω–¥–µ—Ä ‚Ññ<code>{tender.id}<code></b>\n"
            f"\t<b>‚îú –ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{tender.customer_name}</code>\n"
            f"\t<b>‚îú –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> <code>{tender.name}</code>\n"
            f"\t<b>‚îú –î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: </b> <code>{tender.deadline_date}</code>\n"
            f"\t<b>‚îî –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: </b> <code>{tender.deadline_time}</code>\n"
            # f"\t<b> –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> <code>{tender.creation_date}</code>\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∂–∞–ª–æ–±
        if tender.complaints:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∂–∞–ª–æ–±–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            template += TenderView.generate_complaint_text(tender.complaints)

        return template
    
    @staticmethod
    def display_tender_date_change_info(old_tender_info: Tender, new_tender_info: Tender) -> str:
        """
        –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä.
        """
        template = (
            f"<b>‚ö†Ô∏è –ò–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫.</b>\n"\
            f"\n"
            f"<b>{' ':5}‚û°Ô∏è <a href='{old_tender_info.url}'>{old_tender_info.name}</a></b>\n"
            f"\n"
            f"<b>{' ':5}‚≠ïÔ∏è –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: <code>{old_tender_info.deadline_date} {old_tender_info.deadline_time}</code></b>\n"
            f"\n"
            f"<b>{' ':5}‚ùáÔ∏è –ù–æ–≤–∞—è –¥–∞—Ç–∞: <code>{new_tender_info.deadline_date} {new_tender_info.deadline_time}</code></b>\n"
        )

        return template

    @staticmethod
    def display_tender_new_complaint(tender: Tender, complaints: list[str]):
        template = (
            f"<b>‚ö†Ô∏è –ü–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–æ–≤—ã–µ –∂–∞–ª–æ–±—ã</b>\n"
            f"\n"
            f"<b>{' ':5}‚û°Ô∏è <a href='{tender.url}'>{tender.name}</a></b>\n"
            f"<b>{' ':5}üìÖ –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{tender.deadline_date} {tender.deadline_time}</code></b>\n"
            f"\n"
            +TenderView.generate_complaint_text(complaints, is_attention=False)
        )

        return template

    @staticmethod
    def generate_complaint_text(complaints: str, is_attention: bool = True) -> str:
            """
            –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∂–∞–ª–æ–±–∞–º–∏
            """

            if isinstance(complaints, str):
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–Ω–¥–µ—Ä—ã.
                complaints = complaints.split(";")
            template = ""
            if is_attention:
                template = "\n<b>‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ</b>\n\n"
            template += "\n".join(
                f"{' '*5}<b><a href='{complaint}'>‚õîÔ∏è –ñ–∞–ª–æ–±–∞ #{num}</a></b>"
                for num, complaint in enumerate(complaints, start=1)
            )

            return template









