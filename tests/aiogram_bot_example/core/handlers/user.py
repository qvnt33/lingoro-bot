import math

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, CommandObject

from core.callback_data import TenderCall, PaginationCall
from core.keyboards import TenderKB
from core.filters import IsPrivateChat, IsGroupChat

from utils import other_tender
from utils.types import Tender, TenderStatus
from utils.db import DataBaseController
from utils.tender.tender_view import display_add_tender, display_list_tender


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ–Ω–¥–µ—Ä –±–æ—Ç.</b>")

@router.message(IsGroupChat(), Command("–¥–æ–±–∞–≤–∏—Ç—å_—Ç–µ–Ω–¥–µ—Ä", "–¥–æ–±–∞–≤–∏—Ç—å", "–¥", "add"))
async def cmd_add_tender(message: Message, command: CommandObject, db: DataBaseController):
    try:
        # –ü–æ–ª—É—á–∞–µ—Ç URL —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        tender_url = other_tender.get_command_args(command=command, is_url=True)

        # –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –°–°–´–õ–ö–ò
        tender_id = other_tender.extract_id_from_url(tender_url)

        _exist_tender = db.tender.exist_tender(tender_id=tender_id)

        if _exist_tender:
            raise ValueError("–¢–µ–Ω–¥–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        tender: Tender = await other_tender.tender_parser(tender_url)

        tender.id = tender_id
        tender.url = tender_url
        tender.user_id = message.from_user.id
        
        db.tender.add_tender(tender)
        tender_text = display_add_tender(tender)
        
        await message.answer(
            text=tender_text,
            reply_markup=TenderKB.confirm_add_tender(
                user_id=message.from_user.id,
                tender_id=tender_id
            )
        )
    except ValueError as Ex:
        print(Ex)
        await message.answer(f"‚ö†Ô∏è {Ex}")

    
@router.message(IsGroupChat(), Command("–ø–æ–¥–∞–ª_–∑–∞—è–≤–∫—É", "–ø–æ–¥–∞—Ç—å", "–ø", "accept"))
async def cmd_submitted_tender(message: Message, command: CommandObject, db: DataBaseController):
    try:
        # –ü–æ–ª—É—á–∞–µ—Ç URL —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        tender_identification = other_tender.get_command_args(command=command)

        if tender_identification.startswith("https://"):
            # –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –°–°–´–õ–ö–ò
            tender_id = other_tender.extract_id_from_url(tender_identification)
        else:
            tender_id = tender_identification

        tender: Tender = db.tender.get_tender(tender_id=tender_id)
        
        # –ï—Å–ª–∏ —Ç–µ–Ω–¥–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not tender:
            raise ValueError(f"–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender.id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–µ.")
        
        if tender.status == TenderStatus.IN_SUB.value:
            raise ValueError(f"–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ <code>{TenderStatus.status_description.value.get(TenderStatus.IN_SUB.value)}</code>")

        db.tender.update_tender_status(tender_id=tender.id,new_status=TenderStatus.IN_SUB.value)

        await message.answer(f"–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender.id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å <code>{TenderStatus.status_description.value[TenderStatus.IN_SUB.value]}</code>")
    except ValueError as Ex:
        await message.answer(f"‚ö†Ô∏è {Ex}")


@router.message(IsGroupChat(), Command("—É–¥–∞–ª–∏—Ç—å_–∑–∞—è–≤–∫—É", "—É", "remove", "—É–¥–∞–ª–∏—Ç—å"))
async def cmd_delete_tender(message: Message, command: CommandObject, db: DataBaseController):
    try:
        # –ü–æ–ª—É—á–∞–µ—Ç URL —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        tender_identification = other_tender.get_command_args(command=command)

        if tender_identification.startswith("https://"):
            # –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –°–°–´–õ–ö–ò
            tender_id = other_tender.extract_id_from_url(tender_identification)
        else:
            tender_id = tender_identification

        tender: Tender = db.tender.get_tender(tender_id=tender_id)
        
        # –ï—Å–ª–∏ —Ç–µ–Ω–¥–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not tender:
            raise ValueError(f"–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender.id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–µ.")
        
        if tender.status == TenderStatus.DELETE.value:
            raise ValueError(f"–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ <code>{TenderStatus.status_description.value.get(TenderStatus.DELETE.value)}</code>")

        db.tender.update_tender_status(tender_id=tender.id,new_status=TenderStatus.DELETE.value)

        await message.answer(f"–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender.id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å <code>{TenderStatus.status_description.value[TenderStatus.DELETE.value]}</code>")
    except ValueError as Ex:
        await message.answer(f"‚ö†Ô∏è {Ex}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ –≤—ã–≤–æ–¥—É —Å–ø–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞.
@router.message(IsPrivateChat(), Command("remove_list", "sub_list", "jobs_list"))
async def cmd_get_tenders_list(message: Message, command: CommandObject, db: DataBaseController):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.
        command = command.command

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã
        command_data = eval(f"TenderStatus.{command}.value")
        command_status = command_data.get("status")
        command_text = command_data.get("tender_text")

        pages = db.tender.get_count_tenders_by_status(command_status)
        max_pager = math.ceil(pages/5)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∫–æ–º–∞–Ω–¥—ã.
        tenders = db.tender.get_tenders_by_status(command_status)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        template = display_list_tender(tenders, command_text)

        # –í—ã–≤–æ–¥ —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"{template}", reply_markup=TenderKB.pagination(command=command, max_page=max_pager))
    except ValueError as Ex:
        await message.answer(f"‚ö†Ô∏è {Ex}")


@router.callback_query(TenderCall.filter(F.action.in_(["accept", "cancel"])))
async def callback_new_task(call: CallbackQuery, callback_data: TenderCall, db: DataBaseController):
        try:
            action = callback_data.action
            tender_id = callback_data.tender_id
            tender_user_id = callback_data.cr_user_id
            
            if call.from_user.id != tender_user_id:
                raise ValueError("–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            if action == "accept":
                db.tender.update_tender_status(tender_id=tender_id, new_status=1)
                text = "‚úÖ –¢–µ–Ω–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É."
            elif action == "cancel":
                db.tender.delete_tender(tender_id=tender_id)
                text = "‚ùå –¢–µ–Ω–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω."
            else:
                raise ValueError("–ù–µ –∑–Ω–∞—é –∫–∞–∫ —Ç—ã –ø–æ–ø–∞–ª —Å—é–¥–∞, —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É.")
                
            await call.message.edit_text(f"<b>{text}</b>")
            
        except ValueError as Ex:
            await call.answer(show_alert=True, text=str(Ex))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(PaginationCall.filter())
async def cmd_get_tenders_list(call: CallbackQuery, callback_data: PaginationCall, db: DataBaseController):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.
        command = callback_data.command
        page = callback_data.page

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã
        command_data = eval(f"TenderStatus.{command}.value")
        command_status = command_data.get("status")
        command_text = command_data.get("tender_text")

        pages = db.tender.get_count_tenders_by_status(command_status)

        max_pager = math.ceil(pages/5)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∫–æ–º–∞–Ω–¥—ã.
        tenders = db.tender.get_tenders_by_status(command_status, offset=page*5)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        template = display_list_tender(tenders, command_text)

        # –í—ã–≤–æ–¥ —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.edit_text(f"{template}", reply_markup=TenderKB.pagination(command=command, max_page=max_pager, current_page=page))
    except ValueError as Ex:
        await call.message.edit_text(f"‚ö†Ô∏è {Ex}")


@router.message(Command("id"))
async def cmd_id(message: Message):
    await message.delete()
    print(message.chat)


@router.message(Command("menu"))
@router.message(F.text.in_(["üéõ –ú–µ–Ω—é"]))
async def cmd_id(message: Message, command: CommandObject):
    args = command.args
    if not args:
        return 


