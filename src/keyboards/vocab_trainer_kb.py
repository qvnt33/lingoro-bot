from aiogram.types import InlineKeyboardButton
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_kb_all_training() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"""
    buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text='üìñ –ü—Ä—è–º–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ (W -> T)', callback_data='direct_translation')],
        [InlineKeyboardButton(text='üìñ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–µ—Ä–µ–∫–ª–∞–¥ (T -> W)', callback_data='reverse_translation')],
        [InlineKeyboardButton(text='üìö –ó–º—ñ–Ω–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫', callback_data='vocab_trainer')],
        [InlineKeyboardButton(text='üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='menu')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_kb_finish_training() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text='üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='repeat_training')],
        [InlineKeyboardButton(text='üéØ –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='change_training_mode')],
        [InlineKeyboardButton(text='üìö –ó–º—ñ–Ω–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫', callback_data='vocab_trainer')],
        [InlineKeyboardButton(text='üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='menu')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_kb_process_training() -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text='‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data='skip_word')],
        [
            InlineKeyboardButton(text='üí° –ê–Ω–æ—Ç–∞—Ü—ñ—è', callback_data='show_annotation'),
            InlineKeyboardButton(text='üí¨ –ü–µ—Ä–µ–∫–ª–∞–¥', callback_data='show_translation')],
        [InlineKeyboardButton(text='‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='cancel_training')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_kb_confirm_cancel_training() -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text='‚úÖ –¢–∞–∫', callback_data='accept_cancel_training')],
        [InlineKeyboardButton(text='‚ùå –ù—ñ', callback_data='decline_cancel_training')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_kb_vocab_selection_training(all_vocabs_data: list[dict],
                                    is_with_btn_vocab_base: bool = False) -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∏–±–æ—Ä–æ–º —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è".

    Args:
        all_vocabs_data (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑—ñ –≤—Å—ñ–º–∞ –¥–∞–Ω–∏–º–∏.
        is_with_btn_vocab_base (bool): –ü—Ä–∞–ø–æ—Ä, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–ë–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤". –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º False.
        "–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫" –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É "–ë–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤"

    Returns:
        InlineKeyboardMarkup: –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞.
    """
    kb = InlineKeyboardBuilder()

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    for vocab in all_vocabs_data:
        vocab_id: int = vocab.get('id')
        vocab_name: str = vocab.get('name')
        wordpairs_count: int = vocab.get('wordpairs_count')

        btn_text: str = f'{vocab_name} [{wordpairs_count}]'
        callback_data_text: str = f'select_vocab_training_{vocab_id}'

        btn_vocab = InlineKeyboardButton(text=btn_text, callback_data=callback_data_text)
        kb.add(btn_vocab)

    if is_with_btn_vocab_base:
        btn_vocab_base = InlineKeyboardButton(text='–ë–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤', callback_data='vocab_base')
        kb.add(btn_vocab_base)

    btn_menu = InlineKeyboardButton(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='menu')
    kb.add(btn_menu)

    kb.adjust(1)
    return kb.as_markup()
