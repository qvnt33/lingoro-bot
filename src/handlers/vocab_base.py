from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData  # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è callback data
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm.query import Query

from db.database import Session
from db.models import Vocabulary
from tools.read_data import app_data

router = Router(name='vocab_base')

vocabulary_lst = [
    {
        'id': 1,
        'name': '(first)Basic English',
        'wordpairs': [
            {'word': 'hello', 'translation': '–ø—Ä–∏–≤—ñ—Ç', 'annotation': 'common greeting'}]},
    {
        'id': 2,
        'name': 'Advanced Grammar',
        'wordpairs': [
            {'word': 'predicate', 'translation': '–ø—Ä–∏—Å—É–¥–æ–∫', 'annotation': 'part of a sentence'},
            {'word': 'noun', 'translation': '—ñ–º–µ–Ω–Ω–∏–∫'}]},
    {
        'id': 3,
        'name': 'Business English',
        'wordpairs': [
            {'word': 'meeting', 'translation': '–∑—É—Å—Ç—Ä—ñ—á'},
            {'word': 'deadline', 'translation': '–∫—Ä–∞–π–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω', 'annotation': 'important for projects'},
            {'word': 'presentation', 'translation': '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è'}]},
    {
        'id': 4,
        'name': 'Idioms & Phrases',
        'wordpairs': [
            {'word': 'break the ice', 'translation': '–∑—Ä—É–π–Ω—É–≤–∞—Ç–∏ –ª—ñ–¥'},
            {'word': 'hit the books', 'translation': '–≤—á–∏—Ç–∏—Å—è —Å—Ç–∞—Ä–∞–Ω–Ω–æ'}]},
    {
        'id': 5,
        'name': 'Common Verbs',
        'wordpairs': [
            {'word': 'run', 'translation': '–±—ñ–≥—Ç–∏'}]},
    {
        'id': 6,
        'name': 'Technical Terms',
        'wordpairs': [
            {'word': 'algorithm', 'translation': '–∞–ª–≥–æ—Ä–∏—Ç–º', 'annotation': 'step-by-step procedure'},
            {'word': 'binary', 'translation': '–¥–≤—ñ–π–∫–æ–≤–∏–π'}]},
    {
        'id': 7,
        'name': 'Travel Vocabulary',
        'wordpairs': [
            {'word': 'passport', 'translation': '–ø–∞—Å–ø–æ—Ä—Ç'},
            {'word': 'reservation', 'translation': '–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'},
            {'word': 'luggage', 'translation': '–±–∞–≥–∞–∂', 'annotation': 'travel necessity'}]},
    {
        'id': 8,
        'name': 'Academic Words',
        'wordpairs': [
            {'word': 'thesis', 'translation': '—Ç–µ–∑–∞'},
            {'word': 'research', 'translation': '–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è', 'annotation': 'systematic investigation'}]},
    {
        'id': 9,
        'name': 'Conversational English',
        'wordpairs': [
            {'word': 'how are you?', 'translation': '—è–∫ —Ç–∏?'}]},
    {
        'id': 10,
        'name': 'Slang & Colloquialisms',
        'wordpairs': [
            {'word': 'cool', 'translation': '–∫—Ä—É—Ç–æ'},
            {'word': 'awesome', 'translation': '—á—É–¥–æ–≤–æ', 'annotation': 'expression of approval'},
            {'word': 'chill', 'translation': '–≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏'}]},
    {
        'id': 11,
        'name': 'Philosophy Terms',
        'wordpairs': [
            {'word': 'existence', 'translation': '—ñ—Å–Ω—É–≤–∞–Ω–Ω—è'}]},
    {
        'id': 12,
        'name': 'Medical Vocabulary',
        'wordpairs': [
            {'word': 'diagnosis', 'translation': '–¥—ñ–∞–≥–Ω–æ–∑'},
            {'word': 'treatment', 'translation': '–ª—ñ–∫—É–≤–∞–Ω–Ω—è', 'annotation': 'method of curing disease'}]},
    {
        'id': 13,
        'name': 'Computer Science Terms',
        'wordpairs': [
            {'word': 'variable', 'translation': '–∑–º—ñ–Ω–Ω–∞'},
            {'word': 'function', 'translation': '—Ñ—É–Ω–∫—Ü—ñ—è', 'annotation': 'block of code'}]},
    {
        'id': 14,
        'name': 'Science Vocab',
        'wordpairs': [
            {'word': 'gravity', 'translation': '–≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è'},
            {'word': 'atom', 'translation': '–∞—Ç–æ–º', 'annotation': 'basic unit of matter'}]},
    {
        'id': 15,
        'name': 'Culinary Vocabulary',
        'wordpairs': [
            {'word': 'recipe', 'translation': '—Ä–µ—Ü–µ–ø—Ç'}]},
    {
        'id': 16,
        'name': 'Historical Terms',
        'wordpairs': [
            {'word': 'revolution', 'translation': '—Ä–µ–≤–æ–ª—é—Ü—ñ—è'},
            {'word': 'empire', 'translation': '—ñ–º–ø–µ—Ä—ñ—è'}]},
    {
        'id': 17,
        'name': 'Geography Words',
        'wordpairs': [
            {'word': 'continent', 'translation': '–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç'},
            {'word': 'latitude', 'translation': '—à–∏—Ä–æ—Ç–∞'},
            {'word': 'equator', 'translation': '–µ–∫–≤–∞—Ç–æ—Ä', 'annotation': 'imaginary line around the Earth'}]},
    {
        'id': 18,
        'name': 'Art & Culture',
        'wordpairs': [
            {'word': 'sculpture', 'translation': '—Å–∫—É–ª—å–ø—Ç—É—Ä–∞'},
            {'word': 'painting', 'translation': '–∫–∞—Ä—Ç–∏–Ω–∞'}]},
    {
        'id': 19,
        'name': 'Literature Vocabulary',
        'wordpairs': [
            {'word': 'novel', 'translation': '—Ä–æ–º–∞–Ω'},
            {'word': 'poetry', 'translation': '–ø–æ–µ–∑—ñ—è', 'annotation': 'literary form'}]},
    {
        'id': 20,
        'name': 'Sports Terms',
        'wordpairs': [
            {'word': 'goal', 'translation': '–≥–æ–ª'}]},
    {
        'id': 21,
        'name': 'Legal Terminology',
        'wordpairs': [
            {'word': 'contract', 'translation': '–∫–æ–Ω—Ç—Ä–∞–∫—Ç'},
            {'word': 'lawsuit', 'translation': '—Å—É–¥–æ–≤–∏–π –ø–æ–∑–æ–≤'}]},
    {
        'id': 22,
        'name': 'Engineering Vocabulary',
        'wordpairs': [
            {'word': 'blueprint', 'translation': '–ø–ª–∞–Ω'},
            {'word': 'mechanism', 'translation': '–º–µ—Ö–∞–Ω—ñ–∑–º', 'annotation': 'system of parts'}]},
    {
        'id': 23,
        'name': 'Financial Terms',
        'wordpairs': [
            {'word': 'investment', 'translation': '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è'},
            {'word': 'profit', 'translation': '–ø—Ä–∏–±—É—Ç–æ–∫', 'annotation': 'financial gain'}]},
    {
        'id': 24,
        'name': 'Marketing Jargon',
        'wordpairs': [
            {'word': 'branding', 'translation': '–±—Ä–µ–Ω–¥–∏–Ω–≥'},
            {'word': 'strategy', 'translation': '—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è'}]},
    {
        'id': 25,
        'name': '(last)Environmental Science',
        'wordpairs': [
            {'word': 'ecosystem', 'translation': '–µ–∫–æ—Å–∏—Å—Ç–µ–º–∞'},
            {'word': 'pollution', 'translation': '–∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è'}]}]


class VocabCallback(CallbackData, prefix='vocab'):
    vocab_id: int


class PaginationCallback(CallbackData, prefix='pagination'):
    name: str  # –Ü–º'—è
    page: int  # –ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    limit: int  # –õ—ñ–º—ñ—Ç —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ


@router.callback_query(PaginationCallback.filter(F.name == 'vocab_base'))
async def process_vocab_pagination(callback: CallbackQuery, callback_data: PaginationCallback) -> None:
    current_page: int = callback_data.page  # –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    total_vocabs: int = len(vocabulary_lst)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    limit: int = callback_data.limit  # –õ—ñ–º—ñ—Ç —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    total_pages: int = (total_vocabs + limit - 1) // limit  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    msg_select_vocab: str = app_data['handlers']['vocab_base']['msg_select_vocab']

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–∂ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    if current_page <= 0:
        current_page = total_pages
    elif current_page > total_pages:
        current_page = 1

    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–∞ –∫—ñ–Ω—Ü–µ–≤–∏–π —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    start_offset: int = (current_page - 1) * limit
    end_offset: int = min(start_offset + limit, total_vocabs)

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    kb: InlineKeyboardMarkup = get_inline_kb_vocab_pagination(start_offset,
                                                              end_offset,
                                                              current_page,
                                                              total_pages,
                                                              limit)

    await callback.message.edit_text(text=msg_select_vocab, reply_markup=kb)


def get_inline_kb_vocab_pagination(start_offset: int,
                                   end_offset: int,
                                   current_page: int,
                                   total_pages: int,
                                   limit: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó"""
    kb = InlineKeyboardBuilder()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    for vocab in vocabulary_lst[start_offset:end_offset]:
        total_wordpairs: int = len(vocab['wordpairs'])  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä —É —Å–ª–æ–≤–Ω–∏–∫—É
        vocab_button_text: str = f'{vocab['name']} [{total_wordpairs}]'
        kb.button(text=vocab_button_text, callback_data=VocabCallback(vocab_id=vocab['id']).pack())

    kb.adjust(1)

    btn_prev_page = InlineKeyboardButton(
        text='‚¨ÖÔ∏è',
        callback_data=PaginationCallback(name='vocab_base', page=current_page - 1, limit=limit).pack())
    btn_page_info = InlineKeyboardButton(
        text=f'{current_page}/{total_pages}',
        callback_data='no_callback')
    btn_next_page = InlineKeyboardButton(
        text='‚û°Ô∏è',
        callback_data=PaginationCallback(name='vocab_base', page=current_page + 1, limit=limit).pack())

    btn_add_vocab = InlineKeyboardButton(
        text='‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫',
        callback_data='add_vocab')

    btn_menu = InlineKeyboardButton(
        text='üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        callback_data='menu')

    kb.row(btn_prev_page, btn_page_info, btn_next_page, width=3)
    kb.row(btn_add_vocab, btn_menu, width=1)

    return kb.as_markup()

'''
def get_inline_kb_user_vocabs(user_vocabs) -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Å–ª–æ–≤–Ω–∏–∫–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    inline_builder = InlineKeyboardBuilder()

    btn_menu = InlineKeyboardButton(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
                                    callback_data='menu')
    btn_vocab_add = InlineKeyboardButton(text='–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫',
                                        callback_data='vocab_add')

    # –§–ª–∞–≥, —á–∏ –ø–æ—Ä–æ–∂–Ω—è –±–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    is_vocab_base_empty: bool = len(user_vocabs.all()) == 0

    if not is_vocab_base_empty:
        with Session() as db:
            wordpair_count: str = len(user_vocabs.all())  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä –≤ —Å–ª–æ–≤–Ω–∏–∫—É

            for num, item in enumerate(iterable=user_vocabs,
                                       start=1):
                vocab_name: str = item.name  # –ù–∞–∑–≤–∞ —Å–ª–æ–≤–Ω–∏–∫–∞
                # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä —É —Å–ª–æ–≤–Ω–∏–∫—É
                wordpair_count = db.query(WordPair).filter(WordPair.vocabulary_id == item.id).count()

                btn_text: str = f'{vocab_name} [{wordpair_count}]'  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

                inline_builder.button(text=btn_text,
                                      callback_data=f'vocab_id_{num}')

    inline_builder.adjust(1)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É —Ä—è–¥–∫—É
    inline_builder.row(btn_vocab_add, btn_menu, width=2)

    return inline_builder.as_markup()
    vocab_id: str  # –î—ñ—è (–Ω–∞—Å—Ç—É–ø–Ω–∞ –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞)


def paginator(page: int = 0):
    vocabulary_lst = [
    {
        'id': 1,
        'name': 'Basic English',
        'wordpairs': [
            {'word': 'hello', 'translation': '–ø—Ä–∏–≤—ñ—Ç', 'annotation': 'common greeting'}]},
    {
        'id': 2,
        'name': 'Advanced Grammar',
        'wordpairs': [
            {'word': 'predicate', 'translation': '–ø—Ä–∏—Å—É–¥–æ–∫', 'annotation': 'part of a sentence'},
            {'word': 'noun', 'translation': '—ñ–º–µ–Ω–Ω–∏–∫'}]},
    {
        'id': 3,
        'name': 'Business English',
        'wordpairs': [
            {'word': 'meeting', 'translation': '–∑—É—Å—Ç—Ä—ñ—á'},
            {'word': 'deadline', 'translation': '–∫—Ä–∞–π–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω', 'annotation': 'important for projects'},
            {'word': 'presentation', 'translation': '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è'}]},
    {
        'id': 4,
        'name': 'Idioms & Phrases',
        'wordpairs': [
            {'word': 'break the ice', 'translation': '–∑—Ä—É–π–Ω—É–≤–∞—Ç–∏ –ª—ñ–¥'},
            {'word': 'hit the books', 'translation': '–≤—á–∏—Ç–∏—Å—è —Å—Ç–∞—Ä–∞–Ω–Ω–æ'}]},
    {
        'id': 5,
        'name': 'Common Verbs',
        'wordpairs': [
            {'word': 'run', 'translation': '–±—ñ–≥—Ç–∏'}]},
    {
        'id': 6,
        'name': 'Technical Terms',
        'wordpairs': [
            {'word': 'algorithm', 'translation': '–∞–ª–≥–æ—Ä–∏—Ç–º', 'annotation': 'step-by-step procedure'},
            {'word': 'binary', 'translation': '–¥–≤—ñ–π–∫–æ–≤–∏–π'}]},
    {
        'id': 7,
        'name': 'Travel Vocabulary',
        'wordpairs': [
            {'word': 'passport', 'translation': '–ø–∞—Å–ø–æ—Ä—Ç'},
            {'word': 'reservation', 'translation': '–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'},
            {'word': 'luggage', 'translation': '–±–∞–≥–∞–∂', 'annotation': 'travel necessity'}]},
    {
        'id': 8,
        'name': 'Academic Words',
        'wordpairs': [
            {'word': 'thesis', 'translation': '—Ç–µ–∑–∞'},
            {'word': 'research', 'translation': '–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è', 'annotation': 'systematic investigation'}]},
    {
        'id': 9,
        'name': 'Conversational English',
        'wordpairs': [
            {'word': 'how are you?', 'translation': '—è–∫ —Ç–∏?'}]},
    {
        'id': 10,
        'name': 'Slang & Colloquialisms',
        'wordpairs': [
            {'word': 'cool', 'translation': '–∫—Ä—É—Ç–æ'},
            {'word': 'awesome', 'translation': '—á—É–¥–æ–≤–æ', 'annotation': 'expression of approval'},
            {'word': 'chill', 'translation': '–≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏'}]},
    {
        'id': 11,
        'name': 'Philosophy Terms',
        'wordpairs': [
            {'word': 'existence', 'translation': '—ñ—Å–Ω—É–≤–∞–Ω–Ω—è'}]},
    {
        'id': 12,
        'name': 'Medical Vocabulary',
        'wordpairs': [
            {'word': 'diagnosis', 'translation': '–¥—ñ–∞–≥–Ω–æ–∑'},
            {'word': 'treatment', 'translation': '–ª—ñ–∫—É–≤–∞–Ω–Ω—è', 'annotation': 'method of curing disease'}]},
    {
        'id': 13,
        'name': 'Computer Science Terms',
        'wordpairs': [
            {'word': 'variable', 'translation': '–∑–º—ñ–Ω–Ω–∞'},
            {'word': 'function', 'translation': '—Ñ—É–Ω–∫—Ü—ñ—è', 'annotation': 'block of code'}]},
    {
        'id': 14,
        'name': 'Science Vocab',
        'wordpairs': [
            {'word': 'gravity', 'translation': '–≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è'},
            {'word': 'atom', 'translation': '–∞—Ç–æ–º', 'annotation': 'basic unit of matter'}]},
    {
        'id': 15,
        'name': 'Culinary Vocabulary',
        'wordpairs': [
            {'word': 'recipe', 'translation': '—Ä–µ—Ü–µ–ø—Ç'}]},
    {
        'id': 16,
        'name': 'Historical Terms',
        'wordpairs': [
            {'word': 'revolution', 'translation': '—Ä–µ–≤–æ–ª—é—Ü—ñ—è'},
            {'word': 'empire', 'translation': '—ñ–º–ø–µ—Ä—ñ—è'}]},
    {
        'id': 17,
        'name': 'Geography Words',
        'wordpairs': [
            {'word': 'continent', 'translation': '–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç'},
            {'word': 'latitude', 'translation': '—à–∏—Ä–æ—Ç–∞'},
            {'word': 'equator', 'translation': '–µ–∫–≤–∞—Ç–æ—Ä', 'annotation': 'imaginary line around the Earth'}]},
    {
        'id': 18,
        'name': 'Art & Culture',
        'wordpairs': [
            {'word': 'sculpture', 'translation': '—Å–∫—É–ª—å–ø—Ç—É—Ä–∞'},
            {'word': 'painting', 'translation': '–∫–∞—Ä—Ç–∏–Ω–∞'}]},
    {
        'id': 19,
        'name': 'Literature Vocabulary',
        'wordpairs': [
            {'word': 'novel', 'translation': '—Ä–æ–º–∞–Ω'},
            {'word': 'poetry', 'translation': '–ø–æ–µ–∑—ñ—è', 'annotation': 'literary form'}]},
    {
        'id': 20,
        'name': 'Sports Terms',
        'wordpairs': [
            {'word': 'goal', 'translation': '–≥–æ–ª'}]},
    {
        'id': 21,
        'name': 'Legal Terminology',
        'wordpairs': [
            {'word': 'contract', 'translation': '–∫–æ–Ω—Ç—Ä–∞–∫—Ç'},
            {'word': 'lawsuit', 'translation': '—Å—É–¥–æ–≤–∏–π –ø–æ–∑–æ–≤'}]},
    {
        'id': 22,
        'name': 'Engineering Vocabulary',
        'wordpairs': [
            {'word': 'blueprint', 'translation': '–ø–ª–∞–Ω'},
            {'word': 'mechanism', 'translation': '–º–µ—Ö–∞–Ω—ñ–∑–º', 'annotation': 'system of parts'}]},
    {
        'id': 23,
        'name': 'Financial Terms',
        'wordpairs': [
            {'word': 'investment', 'translation': '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è'},
            {'word': 'profit', 'translation': '–ø—Ä–∏–±—É—Ç–æ–∫', 'annotation': 'financial gain'}]},
    {
        'id': 24,
        'name': 'Marketing Jargon',
        'wordpairs': [
            {'word': 'branding', 'translation': '–±—Ä–µ–Ω–¥–∏–Ω–≥'},
            {'word': 'strategy', 'translation': '—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è'}]},
    {
        'id': 25,
        'name': 'Environmental Science',
        'wordpairs': [
            {'word': 'ecosystem', 'translation': '–µ–∫–æ—Å–∏—Å—Ç–µ–º–∞'},
            {'word': 'pollution', 'translation': '–∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è'}]}]

    builder = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ InlineKeyboardBuilder
    start_offset = page * 3  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    limit = 3  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    end_offset = start_offset + limit  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
    for vocab in vocabulary_lst[start_offset:end_offset]:  # –ü–µ—Ä–µ–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        builder.row(InlineKeyboardButton(text=vocab['name'], callback_data=Vocab(vocab_id=vocab['id']).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    buttons_row = []  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=Pagination(action='prev', page=page - 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if end_offset < len(vocabulary_lst):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—â—ë –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination(action='next', page=page + 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        buttons_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination(action='next', page=0).pack()))  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    builder.row(*buttons_row)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='cancel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    return builder.as_markup()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≤–∏–¥–µ —Ä–∞–∑–º–µ—Ç–∫–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(Pagination.filter())
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    page = callback_data.page  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    await call.message.edit_reply_markup(reply_markup=paginator(page=page))  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ "–≤–ø–µ—Ä–µ–¥" –∏–ª–∏ "–Ω–∞–∑–∞–¥"


@router.callback_query(F.data == 'vocab_base')
async def process_btn_vocab_base(callback: CallbackQuery) -> None:
    """–í—ñ–¥—Å—Ç–µ–∂—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–∞–∑–∏ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤.
    """
    vocabulary_dict: dict[str, dict[str, dict[str, str]]] = {
    'Basic English': {
        'wordpair1': {'word': 'hello', 'translation': '–ø—Ä–∏–≤—ñ—Ç', 'annotation': 'common greeting'}},
    'Advanced Grammar': {
        'wordpair1': {'word': 'predicate', 'translation': '–ø—Ä–∏—Å—É–¥–æ–∫', 'annotation': 'part of a sentence'},
        'wordpair2': {'word': 'noun', 'translation': '—ñ–º–µ–Ω–Ω–∏–∫'}},
    'Business English': {
        'wordpair1': {'word': 'meeting', 'translation': '–∑—É—Å—Ç—Ä—ñ—á'},
        'wordpair2': {'word': 'deadline', 'translation': '–∫—Ä–∞–π–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω', 'annotation': 'important for projects'},
        'wordpair3': {'word': 'presentation', 'translation': '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è'}},
    'Idioms & Phrases': {
        'wordpair1': {'word': 'break the ice', 'translation': '–∑—Ä—É–π–Ω—É–≤–∞—Ç–∏ –ª—ñ–¥'},
        'wordpair2': {'word': 'hit the books', 'translation': '–≤—á–∏—Ç–∏—Å—è —Å—Ç–∞—Ä–∞–Ω–Ω–æ'}},
    'Common Verbs': {
        'wordpair1': {'word': 'run', 'translation': '–±—ñ–≥—Ç–∏'}},
    'Technical Terms': {
        'wordpair1': {'word': 'algorithm', 'translation': '–∞–ª–≥–æ—Ä–∏—Ç–º', 'annotation': 'step-by-step procedure'},
        'wordpair2': {'word': 'binary', 'translation': '–¥–≤—ñ–π–∫–æ–≤–∏–π'}},
    'Travel Vocabulary': {
        'wordpair1': {'word': 'passport', 'translation': '–ø–∞—Å–ø–æ—Ä—Ç'},
        'wordpair2': {'word': 'reservation', 'translation': '–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'},
        'wordpair3': {'word': 'luggage', 'translation': '–±–∞–≥–∞–∂', 'annotation': 'travel necessity'}},
    'Academic Words': {
        'wordpair1': {'word': 'thesis', 'translation': '—Ç–µ–∑–∞'},
        'wordpair2': {'word': 'research', 'translation': '–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è', 'annotation': 'systematic investigation'}},
    'Conversational English': {
        'wordpair1': {'word': 'how are you?', 'translation': '—è–∫ —Ç–∏?'}},
    'Slang & Colloquialisms': {
        'wordpair1': {'word': 'cool', 'translation': '–∫—Ä—É—Ç–æ'},
        'wordpair2': {'word': 'awesome', 'translation': '—á—É–¥–æ–≤–æ', 'annotation': 'expression of approval'},
        'wordpair3': {'word': 'chill', 'translation': '–≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏'}},
    'Philosophy Terms': {
        'wordpair1': {'word': 'existence', 'translation': '—ñ—Å–Ω—É–≤–∞–Ω–Ω—è'}},
    'Medical Vocabulary': {
        'wordpair1': {'word': 'diagnosis', 'translation': '–¥—ñ–∞–≥–Ω–æ–∑'},
        'wordpair2': {'word': 'treatment', 'translation': '–ª—ñ–∫—É–≤–∞–Ω–Ω—è', 'annotation': 'method of curing disease'}},
    'Computer Science Terms': {
        'wordpair1': {'word': 'variable', 'translation': '–∑–º—ñ–Ω–Ω–∞'},
        'wordpair2': {'word': 'function', 'translation': '—Ñ—É–Ω–∫—Ü—ñ—è', 'annotation': 'block of code'}},
    'Science Vocab': {
        'wordpair1': {'word': 'gravity', 'translation': '–≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è'},
        'wordpair2': {'word': 'atom', 'translation': '–∞—Ç–æ–º', 'annotation': 'basic unit of matter'}},
    'Culinary Vocabulary': {
        'wordpair1': {'word': 'recipe', 'translation': '—Ä–µ—Ü–µ–ø—Ç'}},
    'Historical Terms': {
        'wordpair1': {'word': 'revolution', 'translation': '—Ä–µ–≤–æ–ª—é—Ü—ñ—è'},
        'wordpair2': {'word': 'empire', 'translation': '—ñ–º–ø–µ—Ä—ñ—è'}},
    'Geography Words': {
        'wordpair1': {'word': 'continent', 'translation': '–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç'},
        'wordpair2': {'word': 'latitude', 'translation': '—à–∏—Ä–æ—Ç–∞'},
        'wordpair3': {'word': 'equator', 'translation': '–µ–∫–≤–∞—Ç–æ—Ä', 'annotation': 'imaginary line around the Earth'}},
    'Art & Culture': {
        'wordpair1': {'word': 'sculpture', 'translation': '—Å–∫—É–ª—å–ø—Ç—É—Ä–∞'},
        'wordpair2': {'word': 'painting', 'translation': '–∫–∞—Ä—Ç–∏–Ω–∞'}},
    'Literature Vocabulary': {
        'wordpair1': {'word': 'novel', 'translation': '—Ä–æ–º–∞–Ω'},
        'wordpair2': {'word': 'poetry', 'translation': '–ø–æ–µ–∑—ñ—è', 'annotation': 'literary form'}},
    'Sports Terms': {
        'wordpair1': {'word': 'goal', 'translation': '–≥–æ–ª'}},
    'Legal Terminology': {
        'wordpair1': {'word': 'contract', 'translation': '–∫–æ–Ω—Ç—Ä–∞–∫—Ç'},
        'wordpair2': {'word': 'lawsuit', 'translation': '—Å—É–¥–æ–≤–∏–π –ø–æ–∑–æ–≤'}},
    'Engineering Vocabulary': {
        'wordpair1': {'word': 'blueprint', 'translation': '–ø–ª–∞–Ω'},
        'wordpair2': {'word': 'mechanism', 'translation': '–º–µ—Ö–∞–Ω—ñ–∑–º', 'annotation': 'system of parts'}},
    'Financial Terms': {
        'wordpair1': {'word': 'investment', 'translation': '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è'},
        'wordpair2': {'word': 'profit', 'translation': '–ø—Ä–∏–±—É—Ç–æ–∫', 'annotation': 'financial gain'}},
    'Marketing Jargon': {
        'wordpair1': {'word': 'branding', 'translation': '–±—Ä–µ–Ω–¥–∏–Ω–≥'},
        'wordpair2': {'word': 'strategy', 'translation': '—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è'}},
    'Environmental Science': {
        'wordpair1': {'word': 'ecosystem', 'translation': '–µ–∫–æ—Å–∏—Å—Ç–µ–º–∞'},
        'wordpair2': {'word': 'pollution', 'translation': '–∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è'}}}

    user_id: int = callback.from_user.id

    kb: InlineKeyboardMarkup = paginator()

    msg_vocab_base: str = app_data['handlers']['vocab_base']['msg_select_vocab']

    await callback.message.edit_text(text=msg_vocab_base,
                                     reply_markup=kb)
'''

"""@router.callback_query(F.data == 'vocab_base')
async def process_btn_vocab_base(callback: CallbackQuery) -> None:
    '''–í—ñ–¥—Å—Ç–µ–∂—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–∞–∑–∏ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤.
    '''
    with Session() as db:
        user_id: int = callback.from_user.id
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É—Å—ñ—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ —ó—Ö –ø–æ user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_vocabs: Query[Vocabulary] = db.query(Vocabulary).filter(user_id == Vocabulary.user_id)

        # –§–ª–∞–≥, —á–∏ –ø–æ—Ä–æ–∂–Ω—è –±–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        is_vocab_base_empty: bool = len(user_vocabs.all()) == 0

        kb: InlineKeyboardMarkup = get_inline_kb_user_vocabs(user_vocabs)
        db.commit()

    # –Ø–∫—â–æ –±–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è
    if is_vocab_base_empty:
        msg_vocab_base: str = app_data['handlers']['vocab_base']['vocab_base_is_empty']
    else:
        msg_vocab_base: str = app_data['handlers']['vocab_base']['msg_select_vocab']

    await callback.message.edit_text(text=msg_vocab_base,
                                     reply_markup=kb)

"""
"""
@router.callback_query(F.data == 'dict_add')
async def process_btn_dict_add(callback: CallbackQuery):

    text_dict_add = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è'
    await callback.message.edit_text(text=text_dict_add)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def process_callback(callback: CallbackQuery):
    if callback.data.startswith('call_dict_'):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è –∏–∑ callback_data
        dict_id = int(callback.data.split('_')[1])
        with Session as db:
            all_user_dicts = db.query(
                Vocab).filter(User.id == Vocab.user_id)
            # Vocab_name = db.query(Vocab).filter(
            #     Vocab.id == vocab_id)
            db.commit()

    inline_keyboard = get_inline_kb_dict()
    await callback.message.edit_text(
        text=all_user_dicts[dict_id],
        reply_markup=inline_keyboard)
"""
