import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup

from db.crud import VocabCRUD, WordpairCRUD
from db.database import Session
from exceptions import InvalidVocabIndexError
from src.filters.check_empty_filters import CheckEmptyFilter
from src.keyboards.vocab_base_kb import get_inline_kb_vocab_base
from src.keyboards.vocab_selection_kb import get_inline_kb_vocab_selection
from text_data import MSG_CHOOSE_VOCAB, MSG_ERROR_VOCAB_BASE_EMPTY
from tools.wordpair_utils import format_word_items

router = Router(name='vocab_base')
logger: logging.Logger = logging.getLogger(__name__)


@router.callback_query(F.data == 'vocab_base')
async def process_vocab_base(callback: types.CallbackQuery) -> None:
    """–í—ñ–¥—Å—Ç–µ–∂—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–∞–∑–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤" —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ª–æ–≤–Ω–∏–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫.
    """
    user_id: int = callback.from_user.id
    check_empty_filter = CheckEmptyFilter()

    with Session() as session:
        vocab_crud = VocabCRUD(session)

        # –î–∞–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        all_vocabs_data: list[dict] = vocab_crud.get_all_vocabs_data(user_id)

    # –Ø–∫—â–æ –≤ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    if check_empty_filter.apply(all_vocabs_data):
        msg_text: str = MSG_ERROR_VOCAB_BASE_EMPTY
    else:
        msg_text: str = MSG_CHOOSE_VOCAB

    kb: InlineKeyboardMarkup = get_inline_kb_vocab_selection(all_vocabs_data=all_vocabs_data,
                                                             callback_prefix='select_vocab_base')

    await callback.message.edit_text(text=msg_text, reply_markup=kb)


@router.callback_query(F.data.startswith('select_vocab_base'))
async def process_vocab_base_selection(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–ª–æ–≤–Ω–∏–∫–∞ —É –±–∞–∑—ñ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤"""
    vocab_id = int(callback.data.split('_')[-1])

    await state.update_data(vocab_id=vocab_id)
    logger.info('ID —Å–ª–æ–≤–Ω–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É FSM-Cache')

    try:
        with Session() as session:
            vocab_crud = VocabCRUD(session)
            wordpair_crud = WordpairCRUD(session)

            wordpair_items: list[dict] = wordpair_crud.get_wordpairs(vocab_id)

            # –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ó—Ö –ø–æ–º–∏–ª–æ–∫
            sorted_wordpair_items: list[dict] = sorted(wordpair_items,
                                                       key=lambda item: item['number_errors'],
                                                       reverse=True)
            vocab_data: dict = vocab_crud.get_vocab_data(vocab_id)
    except InvalidVocabIndexError as e:
        logger.error(e)
        return

    vocab_name: str = vocab_data['name']
    vocab_description: str = vocab_data['description'] or '–í—ñ–¥—Å—É—Ç–Ω—ñ–π'
    vocab_number_errors: int = vocab_data['number_errors']
    vocab_wordpairs_count: int = vocab_data['wordpairs_count']

    kb: InlineKeyboardMarkup = get_inline_kb_vocab_base()

    formatted_wordpairs: list[str] = []

    for idx, wordpair_item in enumerate(iterable=sorted_wordpair_items, start=1):
        word_items: list[dict] = wordpair_item['words']
        translation_items: list[dict] = wordpair_item['translations']
        annotation: str = wordpair_item['annotation'] or '–ù–µ–º–∞—î –∞–Ω–æ—Ç–∞—Ü—ñ—ó'
        wordpair_number_errors: int = wordpair_item['number_errors']

        formatted_word_items: list[str] = format_word_items(word_items)
        formatted_translation_items: list[str] = format_word_items(translation_items, is_translation_items=True)

        formatted_wordpair: str = (
            f'{idx}. {formatted_word_items} ‚ñ™Ô∏è '
            f'{formatted_translation_items} ‚ñ™Ô∏è '
            f'{annotation}\n'
            f'üî∫ –ü–æ–º–∏–ª–∫–∏: {wordpair_number_errors}\n')
        formatted_wordpairs.append(formatted_wordpair)

    joined_wordpairs: str = '\n'.join(formatted_wordpairs)

    msg_text: str = (
        f'üìö –ù–∞–∑–≤–∞ —Å–ª–æ–≤–Ω–∏–∫–∞: {vocab_name}\n'
        f'üìÑ –û–ø–∏—Å: {vocab_description}\n'
        f'üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –ø–∞—Ä: {vocab_wordpairs_count}\n'
        f'‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫: {vocab_number_errors}\n\n'
        f'–°–ª–æ–≤–Ω–∏–∫–æ–≤—ñ –ø–∞—Ä–∏:\n'
        f'{joined_wordpairs}')

    await callback.message.edit_text(text=msg_text, reply_markup=kb)
